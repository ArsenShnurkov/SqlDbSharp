<?xml version="1.0" encoding="utf-8"?>
<configuration>
	<configSections>
		<section name="system.data" type="System.Data.Common.DbProviderFactoriesConfigurationHandler, System.Data, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
		<!-- , Version=4.0.0.0 -->
		<section name="entityFramework" type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
	</configSections>
	<system.data>
		<DbProviderFactories>
			<remove invariant="System.Data.SqlDbSharp" />
			<add invariant="System.Data.SqlDbSharp" type="System.Data.SqlDbSharp.SqlDbSharpDbProviderFactory, SqlDbSharp, Culture=neutral" name="SqlDbSharp Provider" description="SqlDbSharp ADO .Net Data Provider" />
		</DbProviderFactories>
	</system.data>
	<entityFramework>
		<providers>
			<provider invariantName="System.Data.SqlDbSharp" type="System.Data.SqlDbSharp.Linq.SqlDbSharpProviderServices, SqlDbSharp.Linq" />
		</providers>
		<!--
		allows you to specify a default connection factory that Code First should use to locate a database to use for a context.
		The default connection factory is only used when no connection string has been added to the configuration file for a context.
		If needed, you can specify constructor parameters using the parameters element.
		<defaultConnectionFactory type="MyNamespace.MyCustomFactory, MyAssembly"> 
		    <parameters> 
		    	<parameter value="System.Data.SqlServerCe.4.0" /> 
				<!- - By default, it’s assumed that constructor arguments are of type string. You can use the type attribute to change this. - ->
				<parameter value="2" type="System.Int32" />
		    </parameters>
		 </defaultConnectionFactory>
		 -->
		<!--
		Code First contexts are configured to use the CreateDatabaseIfNotExists initializer.
		if you are using Code First Migrations, you can configure the database to be migrated automatically 
		using the MigrateDatabaseToLatestVersion<TContext, TMigrationsConfiguration> initializer.
		There is a disableDatabaseInitialization attribute on the context element that can be used to disable database initialization.
		<contexts> 
		  <context type=" Blogging.BlogContext, MyAssembly"> 
		    <databaseInitializer type="Blogging.MyCustomBlogInitializer, MyAssembly"> 
		      <parameters> 
		        <parameter value="MyConstructorParameter" /> 
		      </parameters>
		    </databaseInitializer>
		  </context> 
		</contexts>
		-->
<!--
		<interceptors>
			<interceptor type="System.Data.Entity.Infrastructure.Interception.DatabaseLogger, EntityFramework">
				<parameters>
					<parameter value="/var/log/EF/SavingTest1.txt" />
				</parameters>
			</interceptor>
		</interceptors>
-->
	</entityFramework>
	<connectionStrings>
		<clear />
		<add name="ConnStr" providerName="System.Data.SqlDbSharp" connectionString="database=test;user id=sa;password=;" />
	</connectionStrings>
</configuration>
<!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 -->